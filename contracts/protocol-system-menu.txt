Протокол связи BE и FE для system-menu

Протокол для получения главного меню:

URL: api/system-menu
METHOD: GET
RESPONSE:
[
	{
		id: uuid,
		title: string,
		order: int
	},... 
]                // массив должен быть отсортирован по возростания поля order

Протокол для получения под меню:
URL: api/system-menu/:parentId
METHOD: GET
RESPONSE:
[
	{
		id: uuid,
		title: string,
		order: int
	},... 
]

Протокол для добавления пункта меню:
URL: api/system-menu
METHOD: POST
BODY:
TYPE: application/json
DATA: {
	title: string,
	parentId: uuid
}
RESPONSE: 
[
	{
		id: uuid,
		title: string,
		order: int
	},... 
]    // список нового меню с уже добавленой новой записью для меню с parentId переданом в DATA

Протокол для изменения пункта меню:
URL: api/system-menu
METHOD: PUT
TYPE: application/json
DATA: {
	title:string,
	parentId: uuid
}
RESPONSE: такой же как и в предыдущем только в случае если пункт меню поменял parentId то респонс должен соответсвовать старому parentId

Протокол удаления пункта меню:
URL: api/system-menu/:id/:subMenuDelete
METHOD: DELETE
RESPONSE: такой же как и при добавление пункта меню 
subMenuDelete: boolean // в случае установки флога в значение true удаляются также и все вложеные пункты меню
                       // в случае установки флага в значение false все вложениые путкты меню меняют свой parentId
					   // на parentId удаляемого меню.

В случае ошибок в запросе необходимо создать соответсвующий код ошибки и сообщение.
Пример:
если передан не верный parentId при	запросе	списка пунктов меню вернуть следующий RESPONSE:
{
	error: {
		code: 1,
		message: 'Not found'
	}
}

Для каждой такой ошибки должен быть свой код и своё сообщение.
Также предусмотреть возможность расширения для добавления в базу данніх в колонку action для записи события перехода
при клике на пункт меню и возможность его возврушения на FE и также получение BE при добавление нового пункта меню
и частичном или полном его обновлении.